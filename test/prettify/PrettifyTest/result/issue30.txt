`COM-- A comment`END`PLN
Not`END`PUN(--`END`STR"a comment"`END`PUN)`END`PLN
Also.not`END`PUN(--(`END`PLNA.comment`END`PUN))`END`PLN

`END`KWDmodule`END`PLN Foo`END`PUN(`END`PLNbar`END`PUN)`END`PLN `END`KWDwhere`END`PLN
`END`KWDimport`END`PLN Blah
`END`KWDimport`END`PLN BlahBlah`END`PUN(`END`PLNblah`END`PUN)`END`PLN
`END`KWDimport`END`PLN Monads`END`PUN(`END`PLNException`END`PUN(..),`END`PLN FIO`END`PUN(..),`END`PLNunFIO`END`PUN,`END`PLNhandle`END`PUN,`END`PLNrunFIO`END`PUN,`END`PLNfixFIO`END`PUN,`END`PLNfio`END`PUN,`END`PLN
              write`END`PUN,`END`PLNwriteln`END`PUN,`END`PLNHasNext`END`PUN(..),`END`PLNHasOutput`END`PUN(..))`END`PLN

`END`COM{- nested comments
 - don't work {-yet-}`END`PLN `END`PUN-}`END`PLN
`END`KWDinstance`END`PLN Thingy Foo `END`KWDwhere`END`PLN
  a `END`PUN=`END`PLN b

`END`KWDdata`END`PLN Foo `END`PUN::`END`PLN `END`PUN(*`END`PLN `END`PUN-&gt;`END`PLN `END`PUN*`END`PLN `END`PUN-&gt;`END`PLN `END`PUN*)`END`PLN `END`PUN-&gt;`END`PLN `END`PUN*`END`PLN `END`PUN&gt;`END`PLN `END`PUN*`END`PLN `END`PUN-&gt;`END`PLN `END`PUN*`END`PLN `END`KWDwhere`END`PLN
  Nil `END`PUN::`END`PLN Foo a b c
  Cons `END`PUN::`END`PLN a b c `END`PUN-&gt;`END`PLN Foo abc `END`PUN-&gt;`END`PLN Foo a b c

str `END`PUN=`END`PLN `END`STR"Foo\\Bar"`END`PLN
char `END`PUN=`END`PLN `END`STR'x'`END`PLN
Not.A.Char `END`PUN=`END`PLN `END`STR't`END`PLNoo long'  `END`COM-- Don't barf.  Show that 't is a lexical error.`END`PLN

`END`PUN(`END`PLNident`END`PUN,`END`PLN ident'`END`PUN,`END`PLN Fo''o.b'ar`END`PUN)`END`PLN

`END`PUN(`END`LIT0`END`PUN,`END`PLN `END`LIT12`END`PUN,`END`PLN `END`LIT0x45`END`PUN,`END`PLN `END`LIT0xA7`END`PUN,`END`PLN `END`LIT0o177`END`PUN,`END`PLN `END`LIT0O377`END`PUN,`END`PLN `END`LIT0.1`END`PUN,`END`PLN `END`LIT1.0`END`PUN,`END`PLN `END`LIT1e3`END`PUN,`END`PLN `END`LIT0.5E-3`END`PUN,`END`PLN `END`LIT1.0E+45`END`PUN)`END